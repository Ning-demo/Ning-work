类的基本使用
定义
类描述了所创建的对象共同的属性和方法。。
TypeScript 类定义方式如下:
class class_name { 
 // 类作用域
}
定义类的关键字为 class，后面紧跟类名，类可以包含以下几个模块（类的数据成员）：
字段 − 字段是类里面声明的变量。字段表示对象的有关数据。
构造函数 − 类实例化时调用，可以为类的对象分配内存。
方法 − 方法为对象要执行的操作。
class Person {
  // 注意点: 需要先定义实例属性，才能够使用
  name: string
  age: number

  constructor(name: string, age: number){
    this.name = name;
    this.age = age;
  }

  sayHello(): void{
    console.log(`我的女神是${this.name}, 她今年${this.age}岁了, 但是在我心里她永远18岁!`);
  }

}

let p = new Person("邱淑贞", 54);
p.sayHello();

// 类的继承
// TypeScript 支持继承类，即我们可以在创建类的时候继承一个已存在的类，这个已存在的类称为父类，继承它的类称为子类。
// 类继承使用关键字 extends，子类除了不能继承父类的私有成员(方法和属性)和构造函数，其他的都可以继承。
// TypeScript 一次只能继承一个类，不支持继承多个类，但 TypeScript 支持多重继承（A 继承 B，B 继承 C）。
// 语法格式如下：class child_class_name extends parent_class_name

// 类中的修饰符
// public(默认)：公有，可以在任何地方被访问
// protected: 受保护，可以被其自身以及其子类访问
// private: 私有，只能被其定义所在的类访问。
// readonly: 可以使用 readonly关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。

// 抽象类
// 定义

// 抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化

// 抽象类是专门用于定义哪些不希望被外界直接创建的类的

// 抽象类和接口一样用于约束子类

// 抽象类和接口区别

// 抽象方法必须包含 abstract关键字并且可以包含访问修饰符

// 接口中只能定义约束, 不能定义具体实现。而抽象类中既可以定义约束, 又可以定义具体实现